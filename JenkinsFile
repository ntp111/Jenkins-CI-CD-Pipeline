pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                echo 'Building the code using Maven...'
                echo 'Tool: Maven'
            }
        }

        stage('Unit and Integration Tests') {
            steps {
                echo 'Running unit and integration tests...'
                echo 'Tools: JUnit for unit tests, TestNG for integration tests'
            }
            post {
                always {
                    script {
                        // Write a custom log to a file using Windows commands
                        bat 'echo Unit and Integration Tests Log > UnitTests.log'
                        
                        // Archive the log file to make sure it's accessible
                        archiveArtifacts artifacts: 'UnitTests.log'

                        // Send an email with the log file attached
                        emailext(
                            attachmentsPattern: 'UnitTests.log',
                            to: 'ngtuanphong98@gmail.com',
                            subject: "Unit and Integration Tests Completed",
                            body: """Unit and Integration Tests stage has completed with status: ${currentBuild.currentResult}. 

                            Please find the attached log for more details."""
                        )
                    }
                }
            }
        }

        stage('Code Analysis') {
            steps {
                echo 'Performing code analysis...'
                echo 'Tool: SonarQube'
            }
        }

        stage('Security Scan') {
            steps {
                echo 'Performing security scan...'
                echo 'Tool: OWASP Dependency-Check'
            }
            post {
                always {
                    // Archive the log file
                    archiveArtifacts artifacts: 'build.log', allowEmptyArchive: true
                    
                    // Send an email with log file as attachment
                    emailext(
                        subject: "Build ${currentBuild.fullDisplayName} - ${currentBuild.currentResult}",
                        body: "Please find the build logs attached.\n\nBuild URL: ${env.BUILD_URL}",
                        to: "your-email@example.com",
                        attachLog: true,
                        attachmentsPattern: "build.log"
                    )
                }
            }
        }

        stage('Deploy to Staging') {
            steps {
                echo 'Deploying application to staging environment...'
                echo 'Tool: AWS CLI for deploying to an AWS EC2 instance'
            }
        }

        stage('Integration Tests on Staging') {
            steps {
                echo 'Running integration tests on the staging environment...'
                echo 'Tools: Selenium for web applications, Postman for API testing'
            }
            post {
                always {
                    // Archive the log file
                    archiveArtifacts artifacts: 'build.log', allowEmptyArchive: true
                    
                    // Send an email with log file as attachment
                    emailext(
                        subject: "Build ${currentBuild.fullDisplayName} - ${currentBuild.currentResult}",
                        body: "Please find the build logs attached.\n\nBuild URL: ${env.BUILD_URL}",
                        to: "your-email@example.com",
                        attachLog: true,
                        attachmentsPattern: "build.log"
                    )
                }
            }
        }

        stage('Deploy to Production') {
            steps {
                echo 'Deploying application to production environment...'
                echo 'Tool: AWS CLI for deploying to an AWS EC2 instance'
            }
        }
    }

    post {
        always {
            // Archive the log file
            archiveArtifacts artifacts: 'build.log', allowEmptyArchive: true
            
            // Send an email with log file as attachment
            emailext(
                subject: "Build ${currentBuild.fullDisplayName} - ${currentBuild.currentResult}",
                body: "Please find the build logs attached.\n\nBuild URL: ${env.BUILD_URL}",
                to: "your-email@example.com",
                attachLog: true,
                attachmentsPattern: "build.log"
            )
        }
    }
}
